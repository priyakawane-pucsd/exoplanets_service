// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/exoplanetservice/exoplanets": {
            "get": {
                "description": "Retrieve a paginated list of exoplanets",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exoplanets"
                ],
                "summary": "Get a list of exoplanets",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Limit the number of exoplanets returned",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "default": 0,
                        "description": "Radius of the exoplanet",
                        "name": "radius",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "default": 0,
                        "description": "Mass of the exoplanet",
                        "name": "mass",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of exoplanets",
                        "schema": {
                            "$ref": "#/definitions/dto.ListExoplanetResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/utils.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.CustomError"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new exoplanet with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exoplanets"
                ],
                "summary": "Create a new exoplanet",
                "parameters": [
                    {
                        "description": "Exoplanet Request",
                        "name": "exoplanet",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ExoplanetRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.Exoplanet"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/utils.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.CustomError"
                        }
                    }
                }
            }
        },
        "/exoplanetservice/exoplanets/{id}": {
            "get": {
                "description": "Retrieve detailed information about an exoplanet by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exoplanets"
                ],
                "summary": "Get an exoplanet by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exoplanet ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response containing exoplanet details",
                        "schema": {
                            "$ref": "#/definitions/dto.ExoplanetByIdResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/utils.CustomError"
                        }
                    },
                    "404": {
                        "description": "Exoplanet not found",
                        "schema": {
                            "$ref": "#/definitions/utils.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.CustomError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an exoplanet by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exoplanets"
                ],
                "summary": "Update an exoplanet by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exoplanet ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Exoplanet Request",
                        "name": "updateExoplanetRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ExoplanetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Exoplanet updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/utils.CustomError"
                        }
                    },
                    "404": {
                        "description": "Exoplanet not found",
                        "schema": {
                            "$ref": "#/definitions/utils.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.CustomError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an exoplanet by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exoplanets"
                ],
                "summary": "Delete an exoplanet by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exoplanet ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Exoplanet deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/utils.CustomError"
                        }
                    },
                    "404": {
                        "description": "Exoplanet not found",
                        "schema": {
                            "$ref": "#/definitions/utils.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.CustomError"
                        }
                    }
                }
            }
        },
        "/exoplanetservice/exoplanets/{id}/fuel-estimation": {
            "get": {
                "description": "Calculate fuel estimation for a trip to an exoplanet by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exoplanets"
                ],
                "summary": "Calculate fuel estimation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exoplanet ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Crew capacity for the trip",
                        "name": "crewCapacity",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response containing fuel estimation details",
                        "schema": {
                            "$ref": "#/definitions/dto.FuelEstimationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/utils.CustomError"
                        }
                    },
                    "404": {
                        "description": "Exoplanet not found",
                        "schema": {
                            "$ref": "#/definitions/utils.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.CustomError"
                        }
                    }
                }
            }
        },
        "/exoplanetservice/ping": {
            "get": {
                "description": "Check if the server is alive",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Ping the server",
                "responses": {
                    "200": {
                        "description": "Okay, I am alive!",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.Exoplanet": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "distance_from_earth": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "mass": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "radius": {
                    "type": "number"
                },
                "type_of_exoplanet": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "integer"
                }
            }
        },
        "dto.ExoplanetByIdResponse": {
            "type": "object",
            "properties": {
                "exoplanet": {
                    "$ref": "#/definitions/dto.Exoplanet"
                }
            }
        },
        "dto.ExoplanetRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "distance_from_earth": {
                    "type": "number"
                },
                "mass": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "radius": {
                    "type": "number"
                },
                "type_of_exoplanet": {
                    "type": "string"
                }
            }
        },
        "dto.FuelEstimationResponse": {
            "type": "object",
            "properties": {
                "estimatedFuel": {
                    "type": "number"
                }
            }
        },
        "dto.ListExoplanetResponse": {
            "type": "object",
            "properties": {
                "exoplanets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Exoplanet"
                    }
                }
            }
        },
        "utils.CustomError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
